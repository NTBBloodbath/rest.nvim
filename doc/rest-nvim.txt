*rest-nvim.txt* A very fast, powerful, extensible and asynchronous Neovim HTTP client.


 NTBBloodbath                                                      *rest-nvim*

===============================================================================
CONTENTS                                                   *rest-nvim-contents*
    1. Introduction...........................................|rest-nvim-intro|
    2. Features............................................|rest-nvim-features|
    3. Quick start......................................|rest-nvim-quick-start|
    4. Usage..................................................|rest-nvim-usage|
        1. Commands..................................|rest-nvim-usage-commands|
        2. Requests..................................|rest-nvim-usage-requests|
        3. Import body from external file......|rest-nvim-usage-external-files|
        4. Environment Variables........|rest-nvim-usage-environment-variables|
        5. Dynamic Variables................|rest-nvim-usage-dynamic-variables|
        6. Script Variables..................|rest-nvim-usage-script-variables|
        7. Hooks........................................|rest-nvim-usage-hooks|
    6. License..............................................|rest-nvim-license|
    7. Contributing....................................|rest-nvim-contributing|


===============================================================================
INTRODUCTION                                                  *rest-nvim-intro*

`rest.nvim` by default makes use of native `cURL` bindings. In this way, you
get absolutely all the power that cURL provides from the comfort of our editor
just by using a keybind and without wasting the precious resources of your
machine.

===============================================================================
FEATURES                                                   *rest-nvim-features*

- Easy to use
- Friendly and organized request results window
- Fast runtime with statistics about your request
- Set custom pre-request and post-request hooks to dynamically interact with the data
- Easily set environment variables based on the response to re-use the data later
- Tree-sitter based parsing and syntax highlighting for speed and perfect accuracy
- Possibility of using dynamic/environment variables and Lua scripting in HTTP files


===============================================================================
QUICK START                                             *rest-nvim-quick-start*

After installing `rest.nvim` you will need to configure it using a `setup`
function, it looks like this by default:
>lua
  require("rest-nvim").setup({
    client = "curl",
    env_file = ".env",
    env_pattern = "\\.env$",
    env_edit_command = "tabedit",
    encode_url = true,
    skip_ssl_verification = false,
    custom_dynamic_variables = {},
    logs = {
      level = "info",
      save = true,
    },
    result = {
      split = {
        horizontal = false,
        in_place = false,
        stay_in_current_window_after_split = true,
      },
      behavior = {
        decode_url = true,
        show_info = {
          url = true,
          headers = true,
          http_info = true,
          curl_command = true,
        },
        statistics = {
          enable = true,
          ---@see https://curl.se/libcurl/c/curl_easy_getinfo.html
          stats = {
            { "total_time", title = "Time taken:" },
            { "size_download_t", title = "Download size:" },
          },
        },
        formatters = {
          json = "jq",
          html = function(body)
            if vim.fn.executable("tidy") == 0 then
              return body, { found = false, name = "tidy" }
            end
            local fmt_body = vim.fn.system({
              "tidy",
              "-i",
              "-q",
              "--tidy-mark",      "no",
              "--show-body-only", "auto",
              "--show-errors",    "0",
              "--show-warnings",  "0",
              "-",
            }, body):gsub("\n$", "")

            return fmt_body, { found = true, name = "tidy" }
          end,
        },
      },
    },
    highlight = {
      enable = true,
      timeout = 750,
    },
    ---Example:
    ---
    ---```lua
    ---keybinds = {
    ---  {
    ---    "<localleader>rr", ":Rest run", "Run request under the cursor",
    ---  },
    ---  {
    ---    "<localleader>rl", ":Rest run last", "Re-run latest request",
    ---  },
    ---}
    ---
    ---```
    ---@see vim.keymap.set
    keybinds = {},
  })
<
Please refer to |rest-nvim.config| for more information and documentation.

In this section we will be using `https://reqres.in/` for requests.

Let's say we want to create a new user and send our body as a JSON, so we
will do the following:

    1. We declare the HTTP method to use followed by the URL. >http
       POST https://reqres.in/api/users
<
    2. Since we want to send our body as a JSON object, we set the
       Content-Type header. >
       Content-Type: application/json
<
    3. Now, we set the body of our request. >json
       {
           "name": "morpheus",
           "job": "leader"
       }
<
    4. Finally, we place the cursor over or below the method of our request
       and call `rest.nvim` with the following command: >vim
       :Rest run
<
To get a better understanding of the `:Rest` command, please see |rest-nvim.commands|


===============================================================================
USAGE                                                         *rest-nvim-usage*

Create a new HTTP file or open an existing one and place the cursor over the
request and run the `:Rest run` command (see |rest-nvim.commands|).

Notes:
    - You can find examples of use in the `tests` directory in the GitHub
      repository.
    - `rest.nvim` supports multiple HTTP requests in one file. It selects the
      request in the current cursor line, no matters the position as long as
      the cursor is on a request tree-sitter node.


===============================================================================
COMMANDS                                             *rest-nvim-usage-commands*

`rest.nvim` exposes a `:Rest` command that is available only in HTTP buffers,
this command has very useful subcommands for you (see |rest-nvim.commands|).
Some of these commands are the following:

- `:Rest run`
  Execute one or several HTTP requests depending on the given `scope`.
  Defaults to the request under the cursor (`:Rest run cursor`).

- `:Rest last`
  Re-run the last executed request, alias to `:Rest run last`.

- `:Rest env`
  Manage the environment file that is currently in use while running requests.

If you have used `rest.nvim` before v2 (aka `Thunder Rest`), you will know that
before we used `<Plug>` commands that had to be used in keybinds. This has
changed, and in order not to completely break your workflow, these
commands (`<Plug>RestNvim` and `<Plug>RestNvimLast`) will still work until
the next version, but it is highly recommended to update your setup.

Unfortunately, the following command has had to be removed as it cannot be
re-implemented with the `rest.nvim` v2 architecture and workflow:

- `<Plug>RestNvimPreview`
  Same as `RestNvim` but it returns the cURL command without executing the
  request. Intended for debugging purposes.


===============================================================================
REQUESTS                                             *rest-nvim-usage-requests*

Currently `rest.nvim` supports the following request methods:

    - GET
    - POST
    - DELETE
    - PATCH
    - PUT


===============================================================================
IMPORT BODY FROM EXTERNAL FILE                 *rest-nvim-usage-external-files*

`rest.nvim` allows the http file to import the body from an external file.

The syntax is to append an external body from a file is `< path/to/file.json`.

You can also choose a name for the file sent to the backend using
the syntax `<@user.json path/to/file.json`.

`rest.nvim` supports absolute and relative paths to the external file.


===============================================================================
ENVIRONMENT VARIABLES                   *rest-nvim-usage-environment-variables*

`rest.nvim` allows the use of environment variables in requests.

To use environment variables, the following syntax is used: `{{VARIABLE_NAME}}`.

These environment variables can be obtained from:
    - Your current Neovim session (`vim.env`)
    - Your system shell environment.
    - File in the current working directory (`env_file` in config, `.env` by default).

Environment variables can be set in `.env` format or in `json`.

To change the environment for the session use `:Rest env set path/to/environment`

Environment variables can be set dynamically from the response body.
(see |rest-nvim-usage-script-variables|)


===============================================================================
SCRIPT VARIABLES                                   *rest-nvim-script-variables*

A Lua script can be run after a request has completed. This script must be
below the body and wrapped in `--{% script --%}`. A context table is avaliable
in the response script. The context table can be used to read the response and
set environment variables.

The context table:
>lua
    {
      result = res,
      pretty_print = vim.print,
      json_decode = vim.json.decode,
      set_env = utils.set_env,
    }
<
Now environment variables can be set like so:
>http
    GET https://jsonplaceholder.typicode.com/posts/3

    --{%

    local body = context.json_decode(context.result.body)
    context.set_env("postId", body.id)

    --%}
<


===============================================================================
DYNAMIC VARIABLES                           *rest-nvim-usage-dynamic-variables*

`rest.nvim` allows the use of dynamic variables in requests.

The following dynamic variables are currently supported:
    - `$uuid`: generates a universally unique identifier (UUID-v4)
    - `$timestamp`: generates the current UNIX timestamp (seconds since epoch)
    - `$randomInt`: generates a random integer between 0 and 1000

To use dynamic variables, the following syntax is used: `{{$DYNAMIC_VARIABLE}}`,
e.g. `{{$uuid}}`

You can extend or overwrite built-in dynamic variables, with the config key
>lua
    -- custom_dynamic_variables:
    require("rest-nvim").setup({
      custom_dynamic_variables = {
        -- overwrite built-in
        ['$uuid'] = function()
          return "{{$uuid}}"
        end,
        -- add new dynamic variable function
        ["$date"] = function()
          local os_date = os.date('%Y-%m-%d')
          return os_date
        end,
      },
    })
<


===============================================================================
HOOKS                                                   *rest-nvim-usage-hooks*

`rest.nvim` fires different events upon requests:
   - a User `RestStartRequest` event when launching the request.
   - a User `RestStopRequest` event when the requests finishes.

>lua
  vim.api.nvim_create_autocmd("User", {
    pattern = "RestStartRequest",
    once = true, -- This is optional, only if you want the hook to run once
    callback = function()
      print("Started request")
      -- You can access and modify the request data (body, headers, etc) by
      -- using the following temporal global variable
      vim.print(_G._rest_nvim_req_data)
      -- You can also access environment variables from both your current
      -- shell session and your environment file by using 'vim.env'
      _G._rest_nvim_req_data.headers["USER"] = vim.env.USERNAME
    end,
  })
<


===============================================================================
LICENSE                                                     *rest-nvim-license*

`rest.nvim` is distributed under GPLv3 License, please read the LICENSE file
in the GitHub repository (`rest-nvim/rest.nvim`).


===============================================================================
CONTRIBUTING                                           *rest-nvim-contributing*

    1. Fork it (`github.com/rest-nvim/rest.nvim/fork`)
    2. Create your feature branch (`git checkout -b my-new-feature`)
    3. Commit your changes (`git commit -am 'Add some feature'`)
    4. Push to the branch (`git push origin my-new-feature`)
    5. Create a new Pull Request


vim:tw=78:ts=8:noet:ft=help:norl:
